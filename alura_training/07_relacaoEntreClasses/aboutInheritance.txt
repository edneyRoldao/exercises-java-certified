ABOUT INHERITANCE

	Constructors

	1 - o construtor padrao sempre chama o construtor padrao da classe pai
	    implicitamente: super();

	2 - Se uma classe pai deixar de ter o construtor padrão, suas filhas
	    são obrigadas a chamar o construtor da classe pai explicitamente

	3 - Usamos o this para chamar os construtores da propria classe

	4 - Atenção com os modificadores do construtor das classes Pai.
	    Uma Filha nunca poderá ser instanciada caso o Pai só tiver
	    construtores privados

	5 - As chamadas aos construtores padrão sempre irão ocorre por trás dos 
	    panos caso eles existam, se desejar chamar um construtor específico, 
	    isso deve ser explícito usando super ou this

	6 - como o modificador this é usado para chamar outros construtores da classe,
	    error de recursão podem acontecer e o compilador sabe identificar e nao
	    deixa compilar. Exp: o construtor que recebe string chama o padrao e vice-versa. Um fica chamando o outro.
	    Pode acontecer de ocorre uma recursão por meio da instanciação de um
	    objeto dentro do construtor e isso o compilador não é capaz de enxergar,
	    portanto teremos um erro de execução do tipo: StackOverFlowError

	7 - quando usamos this. metodo ou variavel, ele vai fazer um lookup na herança entre as classes
	    e chamar o primeiro que foi encontrado.

	8 - Não existe multipla herança entre classes, porém uma interface pode extender mais que uma
	    outra interface separando-as por vírgulas

	9 - Quando eu tenho uma variavel filha e tento obter uma referencia a partir do pai, recebemos
	    um erro de classCastException, exp: Filho f = (Filho) new Pai();
	    a classe filha já tem tudo do pai, nao precisa disso.

	10- uma interface nunca implementa outra interface

	11- É importante ficar claro que, quando chamamos o this dentro de um construtor,
		significa que estamos delegando a construcao do objeto para este outro construtor e assim
		por diante. Quando chegar no construtor que realmente vai criar o objeto, ele vai chamar o
		construtor da classe pai super() que está implícito e depois de construir o objeto pai,
		o objeto em questão será criado.
		Baseando-se nessa informacao, nao podemos invocar um metodo dentro do this pois nenhum
		objeto foi criado ainda.

	12- Quando sobrescrevemos um metodo, seu tipo de retorno pode mudar, porém deve ser um tipo
	    especializado do metodo que ele esta sobrescrevendo. Exemplo: podemos sobrescrever um
	    método que retorno Object por um que retorno String pois ela é filha de object, já o contrário,
	    teremos um erro de compilacao.

	13- Só teremos acesso à membros protected quando o tipo declarado for exatamente a subclasse
	    que extende a classe com o atributo protected, não basta só a referência.

	14- Quando ocorre o ClassCastingException: é quando tentamos atribuicao o valor de um tipo
	    com scopo maior em um scopo menor. Exp:
	    String sempre será um object, pois este é pai de todos os objetos.
	    Um object nem sempre é uma string, por isso não podemos atribuir um object a uma string

